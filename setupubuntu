#!/bin/sh
sudo apt-get update
sudo apt install snapd
sudo apt-get install git-all
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt update
sudo apt upgrade
sudo apt sqlite3
sudo apt install zsh
sudo apt install neovim
sudo apt install build-essential
sudo apt install curl
sudo apt install gh
sudo apt install mariadb-server
sudo mysql_secure_installation
#LazyGit
LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
tar xf lazygit.tar.gz lazygit
sudo install lazygit /usr/local/bin
#github desktop
wget -qO - https://mirror.mwt.me/shiftkey-desktop/gpgkey | gpg --dearmor | sudo tee /usr/share/keyrings/mwt-desktop.gpg > /dev/null
sudo sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/mwt-desktop.gpg] https://mirror.mwt.me/shiftkey-desktop/deb/ any main" > /etc/apt/sources.list.d/mwt-desktop.list'
sudo apt update && sudo apt install github-desktop
#installing php
sudo apt install php8.3 php8.3-xml php8.3-curl php8.3-mbstring php8.3-mysql php8.3-sqlite3
curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
sudo chmod +x /usr/local/bin/composer
#feh is for viewing images
sudo apt install feh
sudo apt install tmux
sudo apt install nodejs
sudo apt install npm
sudo apt install fd-find
sudo apt install ripgrep
sudo apt install xclip
sudo apt install fzf
#midnight commander / mc is a file manager
sudo apt install mc
sudo snap install postman
sudo snap install discord
sudo snap install telegram-desktop
sudo docker run hello-world
sudo npm install pm2 -g
#installing i3
#file manager for i3
sudo apt install nemo -y

/usr/lib/apt/apt-helper download-file https://debian.sur5r.net/i3/pool/main/s/sur5r-keyring/sur5r-keyring_2024.03.04_all.deb keyring.deb SHA256:f9bb4340b5ce0ded29b7e014ee9ce788006e9bbfe31e96c09b2118ab91fca734
sudo apt install ./keyring.deb
echo "OUTPUT:"
sudo echo "deb http://debian.sur5r.net/i3/ $(grep '^DISTRIB_CODENAME=' /etc/lsb-release | cut -f2 -d=) universe" | sudo tee /etc/apt/sources.list.d/sur5r-i3.list
echo "OUTPUT END"
sudo apt install i3
sudo apt install dmenu
sudo apt install polybar
sudo mkdir -p ~/.config/polybar && cp polybarconf ~/.config/polybar/config.ini
sudo cp launc_polybar.sh ~/.config/polybar/launch.sh
# copy the config file to the i3 config file
mkdir -p ~/.config/i3 && cp i3conf ~/.config/i3/config

#installing dependencies for pyenv
#https://itsfoss.com/pyenv-ubuntu/
sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl
#installing pyenv
curl https://pyenv.run | bash
cp ./.tmux.conf ~/
mkdir -p ~/.config && cd ~/.config
git clone https://github.com/JeppeOEM/nvim.git
mkdir -p ~/.local/share/fonts
cd ~/.local/share/fonts && curl -fLO https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/DroidSansMNerdFont-Regular.otf
cd
curl -L -R -O https://www.lua.org/ftp/lua-5.4.6.tar.gz
tar zxf lua-5.4.6.tar.gz
cd lua-5.4.6
make all test
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
git clone https://github.com/github/copilot.vim.git \
  ~/.config/nvim/pack/github/start/copilot.vim
chsh -s $(which zsh)
cd ~/scripts
#execute custom scrippts
chmod +x /home/mrqdt/scripts/cmds/on
chmod +x open_file.zsh
chmod 755 add_to_zshrc
./add_to_zshrc fd zsh-syntax-highlighting zsh-autosuggestions
cat << 'EOF' >> ~/.zshrc

export OPENAI_API_KEY=""
export PATH="$PATH:/home/mrqdt/scripts/cmds"

pip() {
    if [ -z "$VIRTUAL_ENV" ]; then
        echo "Error: You are not in a virtual environment. Please activate a virtual environment before using pip."
    else
        command pip "$@"
    fi
}

add_quotes() {
    cat "\"$1\""
    echo "\"$1\""
}

# https://beebom.com/how-use-chatgpt-linux-terminal/

# Navi to the terminal-gbt directory

alias oo='cd ~/Desktop/Info/NOTES && nvim .'
alias oovim='cd ~/Desktop/Info/NOTES/vim && nvim .'
  #alias chatc='cd /scripts/utils/terminal-gbt && sgpt --code'

# Set PATH for custom scripts
export PATH="$PATH:/home/mrqdt/scripts/cmds"

# Alias to activate virtual environment
alias venvgo=". .venv/bin/activate"

# Function to create and activate a virtual environment
alias venv="python3 -m venv .venv && . .venv/bin/activate"

# Function to activate pip only if in a virtual environment
pip() {
    if [ -z "$VIRTUAL_ENV" ]; then
        echo "Error: You are not in a virtual environment. Please activate a virtual environment before using pip."
    else
        command pip "$@"
    fi
}

# Example aliases

# Open Notes directory in nvim

alias chat='cd ~/scripts/utils/terminal-gbt && venvgo'
# Activate virtual environment and go to chat directory
chatc() {

    cd /home/mrqdt/scripts/utils/terminal-gbt && . .venv/bin/activate
    echo "Enter your text for sgpt --code and press Enter:"
    read input_text
    command="sgpt --code \"$input_text\""
    echo "Running command: $command"
    eval $command
}
chats() {

    cd /home/mrqdt/scripts/utils/terminal-gbt && . .venv/bin/activate
    echo "Enter your text for sgpt and press Enter:"
    read input_text
    command="sgpt \"$input_text\""
    echo "Running command: $command"
    eval $command


}

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


eval "$(pyenv virtualenv-init -)"
EOF

source ~/.zshrc
